name: Update Sensor Data

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Allow the workflow to write to the repository

concurrency:
  group: update-sensor-data
  cancel-in-progress: false  # Don't cancel running jobs, just queue them

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate UUID
        id: uuid
        run: echo "REQUEST_ID=$(uuidgen)" >> $GITHUB_OUTPUT

      - name: Fetch Govee sensor data
        run: |
          mkdir -p public
          curl -X POST "https://openapi.api.govee.com/router/api/v1/device/state" \
            -H "govee-api-key: ${{ secrets.GOVEE_API_KEY }}" \
            -H "content-type: application/json" \
            -d '{
              "requestId": "${{ steps.uuid.outputs.REQUEST_ID }}",
              "payload": {
                "sku": "H5179",
                "device": "E2:A9:18:1F:68:82:D8:B7"
              }
            }' \
            -o temp-response.json

      - name: Process sensor data
        run: |
          # Debug: Show what we received from the API
          echo "=== API Response Debug ==="
          echo "File size: $(wc -c < temp-response.json) bytes"
          echo "Content:"
          cat temp-response.json
          echo "=========================="
          
          # Check if response is empty
          if [ ! -s temp-response.json ]; then
            echo "ERROR: API response is empty"
            echo '{"error": "Empty API response", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'", "source": "github-actions-error"}' > public/sensor-data.json
          else
            # Add timestamp to the response
            echo "$(cat temp-response.json)" | jq '. + {"timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'", "source": "github-actions"}' > public/sensor-data.json
          fi
          rm temp-response.json

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/sensor-data.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update sensor data - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            # Pull latest changes before pushing to handle conflicts
            git pull --rebase origin main || {
              echo "Rebase failed, trying merge strategy"
              git rebase --abort 2>/dev/null || true
              git pull origin main || {
                echo "Merge failed, resolving conflicts automatically"
                # For sensor-data.json conflicts, always use our version (the new data)
                git checkout --ours public/sensor-data.json 2>/dev/null || true
                git add public/sensor-data.json 2>/dev/null || true
                git commit --no-edit 2>/dev/null || true
              }
            }
            # Retry push up to 3 times with exponential backoff
            for i in {1..3}; do
              if git push; then
                echo "Successfully pushed changes"
                break
              else
                echo "Push failed, attempt $i/3"
                if [ $i -lt 3 ]; then
                  sleep $((2**i))  # Exponential backoff: 2s, 4s
                  git pull --rebase origin main || git pull origin main
                fi
              fi
            done
          fi
