name: Update Sensor Data

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Allow the workflow to write to the repository

concurrency:
  group: update-sensor-data
  cancel-in-progress: false  # Don't cancel running jobs, just queue them

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate UUID
        id: uuid
        run: echo "REQUEST_ID=$(uuidgen)" >> $GITHUB_OUTPUT

      - name: Fetch Govee sensor data
        run: |
          mkdir -p public
          curl -X POST "https://openapi.api.govee.com/router/api/v1/device/state" \
            -H "govee-api-key: ${{ secrets.GOVEE_API_KEY }}" \
            -H "content-type: application/json" \
            -H "user-agent: github-actions/1.0" \
            -H "accept: */*" \
            --http2 \
            -v \
            -d '{
              "requestId": "${{ steps.uuid.outputs.REQUEST_ID }}",
              "payload": {
                "sku": "H5179",
                "device": "E2:A9:18:1F:68:82:D8:B7"
              }
            }' \
            -o temp-response.json

      - name: Process sensor data
        run: |
          # Debug: Show what we received from the API
          echo "=== API Response Debug ==="
          echo "File size: $(wc -c < temp-response.json) bytes"
          echo "Content:"
          cat temp-response.json
          echo "=========================="
          
          # Check if response is empty
          if [ ! -s temp-response.json ]; then
            echo "ERROR: API response is empty"
            echo '{"error": "Empty API response", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'", "source": "github-actions-error"}' > public/sensor-data.json
          else
            # Transform the real API response to match FormicariumPage expectations
            echo "$(cat temp-response.json)" | jq '{
              code: .code,
              message: .msg,
              data: {
                payload: {
                  device: .payload.device,
                  sku: .payload.sku,
                  capabilities: [
                    {
                      type: "devices.capabilities.temperature",
                      value: (.payload.capabilities[] | select(.instance == "sensorTemperature") | .state.value)
                    },
                    {
                      type: "devices.capabilities.humidity", 
                      value: (.payload.capabilities[] | select(.instance == "sensorHumidity") | .state.value)
                    }
                  ]
                }
              },
              timestamp: "'$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'",
              source: "github-actions"
            }' > public/sensor-data.json
          fi
          rm temp-response.json

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config --local pull.rebase false  # Use merge strategy
          
          # Check if we have changes to commit
          git add public/sensor-data.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "Update sensor data - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            
            # Push with retry logic and conflict resolution
            for i in {1..5}; do
              echo "Push attempt $i"
              
              # Pull latest changes first with merge strategy
              git pull origin main --no-rebase || {
                echo "Pull failed, attempting to resolve conflicts"
                # If there are conflicts in sensor-data.json, use our version
                if git status --porcelain | grep -q "public/sensor-data.json"; then
                  echo "Resolving sensor-data.json conflict by using our version"
                  git add public/sensor-data.json
                  git commit -m "Resolve sensor data conflict - $(date -u +"%Y-%m-%d %H:%M:%S UTC")" || true
                fi
              }
              
              # Try to push
              if git push origin main; then
                echo "Successfully pushed changes"
                echo "Triggering GitHub Pages rebuild..."
                # Trigger the deploy workflow to rebuild GitHub Pages with updated sensor data
                curl -X POST \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy.yml/dispatches \
                  -d '{"ref":"main"}'
                break
              else
                echo "Push failed, waiting before retry..."
                sleep $((i * 2))
              fi
              
              if [ $i -eq 5 ]; then
                echo "Failed to push after 5 attempts"
                exit 1
              fi
            done
          fi
