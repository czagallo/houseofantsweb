name: Update Sensor Data

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Allow the workflow to write to the repository

concurrency:
  group: update-sensor-data
  cancel-in-progress: false  # Don't cancel running jobs, just queue them

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate UUID
        id: uuid
        run: echo "REQUEST_ID=$(uuidgen)" >> $GITHUB_OUTPUT

      - name: Fetch Govee sensor data
        run: |
          mkdir -p public
          curl -X POST "https://openapi.api.govee.com/router/api/v1/device/state" \
            -H "govee-api-key: ${{ secrets.GOVEE_API_KEY }}" \
            -H "content-type: application/json" \
            -d '{
              "requestId": "${{ steps.uuid.outputs.REQUEST_ID }}",
              "payload": {
                "sku": "H5179",
                "device": "E2:A9:18:1F:68:82:D8:B7"
              }
            }' \
            -o temp-response.json

      - name: Process sensor data
        run: |
          # Debug: Show what we received from the API
          echo "=== API Response Debug ==="
          echo "File size: $(wc -c < temp-response.json) bytes"
          echo "Content:"
          cat temp-response.json
          echo "=========================="
          
          # Check if response is empty
          if [ ! -s temp-response.json ]; then
            echo "ERROR: API response is empty"
            echo '{"error": "Empty API response", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'", "source": "github-actions-error"}' > public/sensor-data.json
          else
            # Add timestamp to the response
            echo "$(cat temp-response.json)" | jq '. + {"timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'", "source": "github-actions"}' > public/sensor-data.json
          fi
          rm temp-response.json

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config --local pull.rebase false  # Use merge strategy
          
          # Check if we have changes to commit
          git add public/sensor-data.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Retry the entire process up to 3 times
          for attempt in {1..3}; do
            echo "Attempt $attempt/3"
            
            # Always start fresh by pulling latest changes first
            git reset --soft HEAD~1 2>/dev/null || true  # Undo any previous commit
            git reset HEAD public/sensor-data.json 2>/dev/null || true  # Unstage
            
            # Pull latest changes
            git pull origin main --no-edit || {
              echo "Pull failed, continuing with local changes"
            }
            
            # Stage our changes again
            git add public/sensor-data.json
            
            # Check if we still have changes after pull
            if git diff --staged --quiet; then
              echo "No changes after pull, exiting"
              exit 0
            fi
            
            # Commit our changes
            git commit -m "Update sensor data - $(date -u +"%Y-%m-%d %H:%M:%S UTC")" || {
              echo "Commit failed, trying again"
              continue
            }
            
            # Try to push
            if git push; then
              echo "Successfully pushed changes on attempt $attempt"
              exit 0
            else
              echo "Push failed on attempt $attempt"
              if [ $attempt -lt 3 ]; then
                sleep $((2**attempt))  # Exponential backoff: 2s, 4s
              fi
            fi
          done
          
          echo "Failed to push after 3 attempts"
          exit 1
